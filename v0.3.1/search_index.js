var documenterSearchIndex = {"docs":
[{"location":"network-data/#PowerWaterModels-Network-Data-Format","page":"Network Data Format","title":"PowerWaterModels Network Data Format","text":"","category":"section"},{"location":"network-data/#The-Network-Data-Dictionary","page":"Network Data Format","title":"The Network Data Dictionary","text":"","category":"section"},{"location":"network-data/","page":"Network Data Format","title":"Network Data Format","text":"Internally, PowerWaterModels uses a dictionary to store network data for both power distribution systems (see PowerModelsDistribution.jl) and water distribution systems (see WaterModels.jl). The dictionary uses strings as key values so it can be serialized to JSON for algorithmic data exchange. The I/O for PowerWaterModels utilizes the serializations available in PowerModelsDistribution.jl and WaterModels.jl to construct the joint network model. All data are assumed to be in per-unit (non-dimensionalized) or SI units. Power, water, and interdependency data are each stored in the data[\"it\"][\"pmd\"], data[\"it\"][\"wm\"], and data[\"it\"][\"dep\"] subdictionaries of data, respectively. Descriptions of the first two subdictionaries are presented in the documentation of PowerModelsDistribution.jl and WaterModels.jl, respectively.","category":"page"},{"location":"network-data/","page":"Network Data Format","title":"Network Data Format","text":"Beside the standard network data supported by PowerModelsDistribution.jl and WaterModels.jl, there are a few extra fields that are required to couple the two systems together. These fields are described in the following subsection.","category":"page"},{"location":"network-data/#Interdependency-Information","page":"Network Data Format","title":"Interdependency Information","text":"","category":"section"},{"location":"network-data/","page":"Network Data Format","title":"Network Data Format","text":"Note that the current version of PowerWaterModels supports only one type of interdependency, i.e., modeling select pumps in the water distribution network as loads in the power distribution network. This is represented by an interdependency type named \"pump_load\". Aside from the interdependency definitions, additional \"source_type\" entries are added to the PowerModelsDistribution (\"pmd\") and WaterModels (\"wm\") subdictionaries to assist in ultimately transforming and linking power and water network inputs.","category":"page"},{"location":"network-data/","page":"Network Data Format","title":"Network Data Format","text":"{\n    \"it\": {\n        \"dep\": {\n            \"pump_load\": {\n                \"1\": {\n                    \"pump\": {\n                        \"source_id\": <String> # Index in the source water\n                        # network data file of the pump that is being modeled\n                        # in the interdependency.\n                    },\n                    \"load\": {\n                        \"source_id\": <String> # Index in the source power\n                        # network data file of the load that is being modeled\n                        # in the interdependency.\n                    },\n                    \"status\": <Int64> # Indicator (-1, 0, or 1) specifying if\n                    # the status of the interdependency is unknown (-1, i.e.,\n                    # potentially on _or_ off), inactive (0, i.e., off) or \n                    # active (1, i.e., on).\n                },\n                \"2\": {\n                    ...\n                },\n                ...\n            }\n        },\n    \"pmd\": {\n        \"source_type\": <String> # Type of input file used to describe the power\n        # distribution network model. Can be \"opendss\" or \"matpower\".\n        ...\n    },\n    \"wm\": {\n        \"source_type\": <String> # Type of input file used to describe the water\n        # distribution network model. Can currently only be set to \"epanet\".\n        ...\n    }\n}","category":"page"},{"location":"developer/#Developer-Documentation","page":"Developer","title":"Developer Documentation","text":"","category":"section"},{"location":"developer/#Data-Processing-Functions","page":"Developer","title":"Data Processing Functions","text":"","category":"section"},{"location":"developer/","page":"Developer","title":"Developer","text":"The PowerWaterModels data format allows the user to specify power network data, water network data, and data related to the interdependencies between power and water systems. PowerWaterModels relies on the automated data processing routines of PowerModelsDistribution and WaterModels, which include capabilities for status propagation, nondimensionalization, topology correction, etc. However, these capabilities are typically used on independent infrastructure data, whereas PowerWaterModels must join these data. Thus, in preprocessing routines, it is recommended that capabilities be invoked explictly so that external dependencies are accounted for. For example, the core data parsing function parse_files performs the following operations:","category":"page"},{"location":"developer/","page":"Developer","title":"Developer","text":"function parse_files(power_path::String, water_path::String, link_path::String)\n    joint_network_data = parse_link_file(link_path)\n    _IM.update_data!(joint_network_data, parse_power_file(power_path))\n    _IM.update_data!(joint_network_data, parse_water_file(water_path))\n    correct_network_data!(joint_network_data)\n\n    # Store whether or not each network uses per-unit data.\n    p_per_unit = get(joint_network_data[\"it\"][_PMD.pmd_it_name], \"per_unit\", false)\n    w_per_unit = get(joint_network_data[\"it\"][_WM.wm_it_name], \"per_unit\", false)\n\n    # Make the power and water data sets multinetwork.\n    joint_network_data_mn = make_multinetwork(joint_network_data)\n\n    # Prepare and correct pump load linking data.\n    assign_pump_loads!(joint_network_data_mn)\n\n    # Modify variable load properties in the power network.\n    _modify_loads!(joint_network_data_mn)\n\n    # Return the network dictionary.\n    return joint_network_data_mn\nend","category":"page"},{"location":"developer/","page":"Developer","title":"Developer","text":"Here, the parse_power_file and parse_water_file use custom routines to parse and transform the input data, i.e.,","category":"page"},{"location":"developer/","page":"Developer","title":"Developer","text":"function parse_power_file(file_path::String)\n    if split(file_path, \".\")[end] == \"m\" # If reading a MATPOWER file.\n        data = _PM.parse_file(file_path)\n        _scale_loads!(data, 1.0 / 3.0)\n        _PMD.make_multiconductor!(data, 3)\n    else\n        data = _PMD.parse_file(file_path)\n    end\n\n    return _IM.ismultiinfrastructure(data) ? data :\n          Dict(\"multiinfrastructure\" => true, \"it\" => Dict(_PMD.pmd_it_name => data))\nend\n\n\nfunction parse_water_file(file_path::String; skip_correct::Bool = true)\n    data = _WM.parse_file(file_path; skip_correct = skip_correct)\n    return _IM.ismultiinfrastructure(data) ? data :\n           Dict(\"multiinfrastructure\" => true, \"it\" => Dict(_WM.wm_it_name => data))\nend","category":"page"},{"location":"developer/","page":"Developer","title":"Developer","text":"After these routines are called, correct_network_data! executes various data and topology correction routines on power, water, and linking data. Then, make_multinetwork ensures that the temporal dimension of each infrastructure and interdependency subdictionary match. Finally, interdependency data are corrected and modified via assign_pump_loads! and _modify_loads! to ensure linking constraints will be modeled appropriately.","category":"page"},{"location":"developer/#Compositional-Problems","page":"Developer","title":"Compositional Problems","text":"","category":"section"},{"location":"developer/","page":"Developer","title":"Developer","text":"A best practice is to adopt a compositional approach for building problems in PowerWaterModels, leveraging problem definitions of PowerModelsDistribution and WaterModels. This helps lessen the impact of breaking changes across independent infrastructure packages. For example, the joint optimal power-water flow problem invokes similar problems of PowerModelsDistribution and WaterModels directly with routines like","category":"page"},{"location":"developer/","page":"Developer","title":"Developer","text":"# Power-only related variables and constraints.\npmd = _get_powermodel_from_powerwatermodel(pwm)\n_PMD.build_mn_mc_mld_simple(pmd)\n\n# Water-only related variables and constraints.\nwm = _get_watermodel_from_powerwatermodel(pwm)\n_WM.build_mn_owf(wm)\n\n# Power-water linking constraints.\nbuild_linking(pwm)\n\n# Add the objective that minimizes power generation costs.\n_PMD.objective_mc_min_fuel_cost(pmd)","category":"page"},{"location":"developer/","page":"Developer","title":"Developer","text":"Compared to the PowerModelsDistribution (_PMD) and WaterModels (_WM) routines, the PowerWaterModels routines only specify interdependency constraints.","category":"page"},{"location":"parser/#File-I/O","page":"File I/O","title":"File I/O","text":"","category":"section"},{"location":"parser/","page":"File I/O","title":"File I/O","text":"Parsing functions in PowerWaterModels use the native parsing features of PowerModelsDistribution and WaterModels with extra features to parse information used to couple the two infrastructures.","category":"page"},{"location":"parser/","page":"File I/O","title":"File I/O","text":"CurrentModule = PowerWaterModels","category":"page"},{"location":"parser/#Coupling-Data-Format","page":"File I/O","title":"Coupling Data Format","text":"","category":"section"},{"location":"parser/","page":"File I/O","title":"File I/O","text":"The PowerWaterModels parsing implementation relies on data formats that support extensions to accommodate arbitrary extra data fields, such as those required to define couplings between infrastructures. Thus, PowerWaterModels largely relies on parsing of MATPOWER, OpenDSS, and EPANET input files to populate some data fields. In addition, the coupling between loads and pumps is accomplished via a tertiary JSON linking file of the following form (further detailed in Interdependency Information):","category":"page"},{"location":"parser/","page":"File I/O","title":"File I/O","text":"{\n    \"it\": {\n        \"dep\": {\n            \"pump_load\": {\n                \"1\": {\n                    \"pump\": {\n                        \"source_id\": <String> # Index in the source water\n                        # network data file of the pump that is being modeled\n                        # in the interdependency.\n                    },\n                    \"load\": {\n                        \"source_id\": <String> # Index in the source power\n                        # network data file of the load that is being modeled\n                        # in the interdependency.\n                    },\n                    \"status\": <Int64> # Indicator (-1, 0, or 1) specifying if\n                    # the status of the interdependency is unknown (-1, i.e.,\n                    # potentially on _or_ off), inactive (0, i.e., off) or \n                    # active (1, i.e., on).\n                },\n                \"2\": {\n                    ...\n                },\n                ...\n            }\n        },\n    \"pmd\": {\n        \"source_type\": <String> # Type of input file used to describe the power\n        # distribution network model. Can be \"opendss\" or \"matpower\".\n        ...\n    },\n    \"wm\": {\n        \"source_type\": <String> # Type of input file used to describe the water\n        # distribution network model. Can currently only be set to \"epanet\".\n        ...\n    }\n}","category":"page"},{"location":"parser/#Parsing-Functions","page":"File I/O","title":"Parsing Functions","text":"","category":"section"},{"location":"parser/","page":"File I/O","title":"File I/O","text":"The following functions can be used for convenient parsing of input files.","category":"page"},{"location":"parser/","page":"File I/O","title":"File I/O","text":"parse_files\nparse_json","category":"page"},{"location":"parser/#PowerWaterModels.parse_files","page":"File I/O","title":"PowerWaterModels.parse_files","text":"parse_files(power_path, water_path, link_path)\n\nParses power, water, and linking data from power_path, water_path, and link_path, respectively, into a single data dictionary. Returns a PowerWaterModels multi-infrastructure data structure keyed by the infrastructure type it.\n\n\n\n\n\n","category":"function"},{"location":"parser/#PowerWaterModels.parse_json","page":"File I/O","title":"PowerWaterModels.parse_json","text":"parse_json(path)\n\nParses a JavaScript Object Notation (JSON) file from the file path path and returns a PowerWaterModels data structure that links power and water networks (a dictionary of data).\n\n\n\n\n\n","category":"function"},{"location":"quickguide/#Quick-Start-Guide","page":"Getting Started","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The following guide walks through the solution of an optimal power-water flow (opwf) problem using the LinDist3FlowPowerModel power distribution network formulation (specified via PowerModelsDistribution) and the PWLRDWaterModel water distribution network formulation (specified via WaterModels).","category":"page"},{"location":"quickguide/#Installation-of-PowerWaterModels","page":"Getting Started","title":"Installation of PowerWaterModels","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The latest stable release of PowerWaterModels can be installed using the Julia package manager with","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"] add PowerWaterModels","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"For the current development version, install the package using","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"] add PowerWaterModels#master","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Finally, test that the package works as expected by executing","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"] test PowerWaterModels","category":"page"},{"location":"quickguide/#Installation-of-an-Optimization-Solver","page":"Getting Started","title":"Installation of an Optimization Solver","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"At least one optimization solver is required to run PowerWaterModels. The solver selected typically depends on the type of problem formulation being employed. Because of the LinDist3FlowPowerModel/PWLRDWaterModel joint formulation, the overall model considered in this tutorial is mixed-integer nonconvex quadratic. One example of an optimization package capable of solving this problem is the mixed-integer nonlinear programming solver Juniper. Juniper itself depends on the installation of a nonlinear programming solver (e.g., Ipopt) and a mixed-integer linear programming solver (e.g., HiGHS). Installation of the JuMP interfaces to Juniper, Ipopt, and HiGHS can be performed via the Julia package manager, i.e.,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"] add JuMP Juniper Ipopt HiGHS","category":"page"},{"location":"quickguide/#(Optional)-Installation-of-Gurobi","page":"Getting Started","title":"(Optional) Installation of Gurobi","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Juniper is likely not the best candidate to solve the mixed-integer nonconvex quadratic problem considered in this tutorial. As another example, the commercial package Gurobi can be used in its place. Assuming Gurobi has already been configured on your system, its Julia interface can be installed using the package manager with","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"] add Gurobi","category":"page"},{"location":"quickguide/#Solving-an-Optimal-Power-Water-Flow-Problem","page":"Getting Started","title":"Solving an Optimal Power-Water Flow Problem","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"After installation of the required solvers, an example optimal power-water flow problem (whose file inputs can be found in the examples directory within the PowerWaterModels repository) can be solved via","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"using JuMP, Juniper, Ipopt, HiGHS\nusing PowerWaterModels\nconst WM = PowerWaterModels.WaterModels\n\n# Set up the optimization solvers.\nipopt = JuMP.optimizer_with_attributes(Ipopt.Optimizer, \"print_level\" => 0, \"sb\" => \"yes\")\nhighs = JuMP.optimizer_with_attributes(HiGHS.Optimizer, \"log_to_console\" => false)\njuniper = JuMP.optimizer_with_attributes(\n    Juniper.Optimizer, \"nl_solver\" => ipopt, \"mip_solver\" => highs,\n    \"branch_strategy\" => :MostInfeasible, \"time_limit\" => 60.0)\n\n# Specify paths to the power, water, and power-water linking files.\np_file = \"examples/data/opendss/IEEE13_CDPSM.dss\" # Power network.\nw_file = \"examples/data/epanet/cohen-short.inp\" # Water network.\npw_file = \"examples/data/json/zamzam.json\" # Power-water linking.\n\n# Parse the input files as a multi-infrastructure data object.\ndata = parse_files(p_file, w_file, pw_file)\n\n# Perform OBBT on water network to improve variable bounds.\nWM.solve_obbt_owf!(data, ipopt; use_relaxed_network = false,\n    model_type = WM.CRDWaterModel, max_iter = 3)\n\n# Use WaterModels to set the partitioning of flows in the water network.\nWM.set_flow_partitions_num!(data, 5)\n\n# Specify the power and water formulation types jointly.\npwm_type = PowerWaterModel{LinDist3FlowPowerModel, PWLRDWaterModel}\n\n# Solve the joint optimal power-water flow problem and store the result.\nresult = solve_opwf(data, pwm_type, juniper)","category":"page"},{"location":"quickguide/#(Optional)-Solving-the-Problem-with-Gurobi","page":"Getting Started","title":"(Optional) Solving the Problem with Gurobi","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Note that Gurobi's NonConvex=2 parameter setting ensures it will correctly handle the nonconvex quadratic constraints that are associated with the power network formulation. The problem considered above can then be solved using Gurobi (instead of Juniper) via","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"import Gurobi\n\n# Solve the joint optimal power-water flow problem and store its result.\ngurobi = JuMP.optimizer_with_attributes(Gurobi.Optimizer, \"NonConvex\" => 2)\nresult_grb = solve_opwf(data, pwm_type, gurobi)","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"First, note that Gurobi solves the problem much more quickly than Juniper. Also note the difference in the objectives obtained between Juniper and Gurobi, i.e.,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"result[\"objective\"] - result_grb[\"objective\"] # Positive difference.","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The objective value obtained via Gurobi is smaller than the one obtained via Juniper, indicating that Gurobi discovered a better solution.","category":"page"},{"location":"quickguide/#Obtaining-Results","page":"Getting Started","title":"Obtaining Results","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The solve commands in PowerWaterModels return detailed results data in the form of a Julia Dict. This dictionary can be saved for further processing as follows:","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"result = solve_opwf(data, pwm_type, juniper)","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"For example, the algorithm's runtime and final objective value can be accessed with","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"result[\"solve_time\"] # Total solve time required (seconds).\nresult[\"objective\"] # Final objective value (in units of the objective).","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The \"solution\" field contains detailed information about the solution produced by the solve method. For example, the following can be used to inspect the temporal variation in the volume of tank 1 in the water distribution network:","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"tank_1_volume = Dict(nw=>data[\"tank\"][\"10\"][\"V\"] for (nw, data) in result[\"solution\"][\"it\"][\"wm\"][\"nw\"])","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"For more information about PowerWaterModels result data, see the PowerWaterModels Result Data Format section.","category":"page"},{"location":"quickguide/#Accessing-Different-Formulations","page":"Getting Started","title":"Accessing Different Formulations","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"As an example, to reformulate the previous problem using the NFAUPowerModel model for power flow and the LRDWaterModel model for water flow, which can then be jointly solved with HiGHS, the following can be executed:","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"# Instantiate a verbose version of the HiGHS optimizer.\nhighs_verbose = JuMP.optimizer_with_attributes(HiGHS.Optimizer, \"log_to_console\" => true)\n\n# Specify the power and water formulation types jointly.\npwm_type_reformulation = PowerWaterModel{NFAUPowerModel, LRDWaterModel}\n\n# Solve the joint optimal power-water flow problem and store the result.\nresult_reformulation = solve_opwf(data, pwm_type_reformulation, highs_verbose)","category":"page"},{"location":"quickguide/#Modifying-Network-Data","page":"Getting Started","title":"Modifying Network Data","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The following example demonstrates one way to perform PowerWaterModels solves while modifying network data.","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"for (nw, network) in data[\"it\"][\"wm\"][\"nw\"]\n    network[\"demand\"][\"3\"][\"flow_nominal\"] *= 0.90\n    network[\"demand\"][\"4\"][\"flow_nominal\"] *= 0.90\n    network[\"demand\"][\"5\"][\"flow_nominal\"] *= 0.90\nend\n\nresult_mod = solve_opwf(data, pwm_type, juniper)","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Note that the smaller demands in the modified problem result in an overall smaller objective value, i.e.,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"# The comparison below should return `true`.\nresult_mod[\"objective\"] < result[\"objective\"]","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"For additional details about the network data, see the PowerWaterModels Network Data Format section.","category":"page"},{"location":"quickguide/#Alternate-Methods-for-Building-and-Solving-Models","page":"Getting Started","title":"Alternate Methods for Building and Solving Models","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The following example demonstrates how to decompose a solve_opwf call into separate model building and solving steps. This allows for inspection of the JuMP model created by PowerWaterModels:","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"# Instantiate the model.\npwm = instantiate_model(data, pwm_type, build_opwf);\n\n# Print the contents of the JuMP model.\nprintln(pwm.model)","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The problem can then be solved and its two result dictionaries can be stored via:","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"# Solve the PowerWaterModels problem and store the result.\nresult = PowerWaterModels._IM.optimize_model!(pwm, optimizer = juniper)","category":"page"},{"location":"constraints/#Constraints","page":"Constraints","title":"Constraints","text":"","category":"section"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"We define the following methods to provide a compositional approach toward defining linking constraints used in coupled power-water models. Such methods should always be defined over AbstractPowerWaterModel.","category":"page"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"Modules = [PowerWaterModels]\nPages   = [\"core/constraint.jl\"]\nOrder   = [:type, :function]\nPrivate  = true","category":"page"},{"location":"constraints/#PowerWaterModels.constraint_fixed_load-Tuple{AbstractPowerWaterModel, Int64}","page":"Constraints","title":"PowerWaterModels.constraint_fixed_load","text":"Constraint for modeling a fixed load (i.e., not connected to a pump). Since the base power formulation uses a variable, 0 leq z_it leq 1, to model the proportion of maximum load served at load i in mathcalL, time index t in mathcalT, a value of one indicates the full load being served, as expected for non-pump loads. That is, these constraints are\n\nz_it = 1  forall i in mathcalL^prime\n forall t in mathcalT\n\nwhere mathcalL^prime is the set of loads not connected to a pump.\n\n\n\n\n\n","category":"method"},{"location":"constraints/#PowerWaterModels.constraint_pump_load-Tuple{AbstractPowerWaterModel, Int64, Int64}","page":"Constraints","title":"PowerWaterModels.constraint_pump_load","text":"Constraint for modeling a variable load (i.e., connected to a pump). Since the base power formulation uses a variable, 0 leq z_it leq 1, to model the proportion of maximum load served at load i in mathcalL, time index t in mathcalT, a value of one indicates the maximum load is being served (denoted as pd). Any other value will represent some proportion of this maximum. Linking pump power to load is thus modeled via\n\nP_jt = z_it sum_c in mathcalC pd_ict \nforall (i j) in mathcalD  forall t in mathcalT\n\nwhere mathcalD is the set of interdependencies, linking loads, i in mathcalL, to pumps, j in mathcalP. Here, P_j is a variable that represents pump power and mathcalC is the set of conductors, i.e., power is bounded by sum_c in mathcalC pd_ict.\n\n\n\n\n\n","category":"method"},{"location":"specifications/#Problem-Specifications","page":"Problem Specifications","title":"Problem Specifications","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"In these specifications, _PMD refers to PowerModelsDistribution and _WM refers to WaterModels.","category":"page"},{"location":"specifications/#Power-Water-Flow-(PWF)","page":"Problem Specifications","title":"Power-Water Flow (PWF)","text":"","category":"section"},{"location":"specifications/#Inherited-Variables-and-Constraints","page":"Problem Specifications","title":"Inherited Variables and Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Power-only related variables and constraints.\npmd = _get_powermodel_from_powerwatermodel(pwm)\n_PMD.build_mn_mc_mld_simple(pmd)\n\n# Water-only related variables and constraints.\nwm = _get_watermodel_from_powerwatermodel(pwm)\n_WM.build_mn_wf(wm)","category":"page"},{"location":"specifications/#Constraints","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Power-water linking constraints.\nbuild_linking(pwm)","category":"page"},{"location":"specifications/#Objective","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Add a feasibility-only objective.\nJuMP.@objective(pwm.model, JuMP.FEASIBILITY_SENSE, 0.0)","category":"page"},{"location":"specifications/#Optimal-Power-Water-Flow-(OPWF)","page":"Problem Specifications","title":"Optimal Power-Water Flow (OPWF)","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Power-only related variables and constraints.\npmd = _get_powermodel_from_powerwatermodel(pwm)\n_PMD.build_mn_mc_mld_simple(pmd)\n\n# Water-only related variables and constraints.\nwm = _get_watermodel_from_powerwatermodel(pwm)\n_WM.build_mn_owf(wm)","category":"page"},{"location":"specifications/#Constraints-2","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Power-water linking constraints.\nbuild_linking(pwm)","category":"page"},{"location":"specifications/#Objective-2","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"# Add the objective that minimizes power generation costs.\n_PMD.objective_mc_min_fuel_cost(pmd)","category":"page"},{"location":"result-data/#PowerWaterModels-Result-Data-Format","page":"Result Data Format","title":"PowerWaterModels Result Data Format","text":"","category":"section"},{"location":"result-data/#The-Result-Data-Dictionary","page":"Result Data Format","title":"The Result Data Dictionary","text":"","category":"section"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"PowerWaterModels uses a dictionary to organize the results of a solve_ command. The dictionary uses strings as key values so it can be serialized to JSON for algorithmic data exchange. The data dictionary organization is designed to be consistent with The Network Data Dictionary.","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"At the top level, the results data dictionary is structured as follows:","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"{\n  \"optimizer\": <string>,        # name of the solver used to solve the model\n  \"termination_status\": <type>, # optimizer status at termination\n  \"dual_status\": <type>,        # optimizer dual status at termination\n  \"primal_status\": <type>,      # optimizer primal status at termination\n  \"solve_time\": <float>,        # reported solve time (in seconds)\n  \"objective\": <float>,         # the final evaluation of the objective function\n  \"objective_lb\": <float>,      # the final lower bound of the objective function (if available)\n  \"solution\": {...}             # complete solution information (details below)\n}","category":"page"},{"location":"result-data/#Solution-Data","page":"Result Data Format","title":"Solution Data","text":"","category":"section"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"The \"solution\" subdictionary provides detailed information about the problem solution produced by the solve_ command. The solution is organized similarly to The Network Data Dictionary with the same nested structure and parameter names, when available. The solution object merges the solution information for both the power distribution system and water distribution system into the same dictionary. For example, result[\"solution\"][\"it\"][\"pmd\"][\"nw\"][\"2\"][\"load\"][\"6\"] reports all the solution values associated with the load at load index \"6\" and time index \"2\", e.g.,","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"{\n    \"status\": 1.0,\n    \"qd\": [0.00068],\n    \"pd\": [0.00117]\n}","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"Similarly, result[\"solution\"][\"it\"][\"wm\"][\"nw\"][\"1\"][\"pump\"][\"2\"] reports all the solution values associated with the water system pump at pump index \"2\" and time index \"1\", e.g.,","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"{\n    \"qn\": 0.0,\n    \"c\": 195.57961638739798,\n    \"g\": 0.8511119380321539,\n    \"P\": 0.01313949265910189,\n    \"status\": 1.0,\n    \"qp\": 0.04295470349204493,\n    \"q\": 0.04295470349204493,\n    \"E\": 0.0001487826668832342,\n    \"y\": 1.0\n}","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"Because the data dictionary and the solution dictionary have the same structure, the InfrastructureModels update_data! helper function can be used to update a data dictionary with values from a solution, e.g.,","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"import InfrastructureModels\n\nInfrastructureModels.update_data!(\n  data[\"it\"][\"wm\"][\"nw\"][\"1\"][\"pump\"][\"2\"],\n  result[\"solution\"][\"it\"][\"wm\"][\"nw\"][\"1\"][\"pump\"][\"2\"]\n)","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"Note that, by default, all results are reported in a per-unit (non-dimensionalized) system. Functions and/or additional data from PowerModelsDistribution and WaterModels can be used to convert such data back to their dimensionalized forms. For example, the code block below translates a per-unit pump flow rate to SI units, then the more conventional units of liters per second.","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"# Get a pump volumetric flow rate solution in the per-unit system.\nflow_per_unit = result[\"solution\"][\"it\"][\"wm\"][\"nw\"][\"1\"][\"pump\"][\"2\"][\"q\"]\n\n# Get the per-unit scalar used to convert back to SI units.\nbase_flow = data[\"it\"][\"wm\"][\"base_flow\"]\n\n# Compute the volumetric flow rate in SI units (cubic meters per second).\nbase_flow * flow_per_unit\n\n# Compute the volumetric flow rate in liters per second.\nbase_flow * flow_per_unit * 1000.0","category":"page"},{"location":"formulations/#Network-Formulations","page":"Network Formulations","title":"Network Formulations","text":"","category":"section"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"The network formulations for joint power-water modeling use the formulations defined in PowerModelsDistribution.jl and WaterModels.jl.","category":"page"},{"location":"formulations/#PowerWaterModels-Types","page":"Network Formulations","title":"PowerWaterModels Types","text":"","category":"section"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"CurrentModule = PowerWaterModels","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"Specification of a PowerWaterModel requires the specification of both a PowerModelsDistribution.AbstractUnbalancedPowerModel and a WaterModels.AbstractWaterModel, respectively. For example, to specify a formulation that leverages the LinDist3FlowPowerModel and PWLRDWaterModel types, the corresponding PowerWaterModel type would be","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"PowerWaterModel{LinDist3FlowPowerModel, PWLRDWaterModel}","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"PowerWaterModels then utilizes the following (internal) function to construct a PowerWaterModel object:","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"instantiate_model","category":"page"},{"location":"formulations/#PowerWaterModels.instantiate_model","page":"Network Formulations","title":"PowerWaterModels.instantiate_model","text":"instantiate_model(p_file, w_file, link_file, model_type, build_method; kwargs...)\n\nInstantiates and returns a PowerWaterModels modeling object from power and water input\nfiles `p_file` and `w_file`. Additionally, `link_file` is an input file that links\npower and water networks, `model_type` is the power-water modeling type, and\n`build_method` is the build method for the problem specification being considered.\n\n\n\n\n\n","category":"function"},{"location":"examples/#Examples-Documentation","page":"Examples","title":"Examples Documentation","text":"","category":"section"},{"location":"examples/#Optimal-Power-Water-Flow-Example","page":"Examples","title":"Optimal Power-Water Flow Example","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In the example script located at examples/opwf.jl, we demonstrate the utility of PowerWaterModels for exploring the tradeoffs encountered in the coordination of joint power and water distribution system operation. Specifically, we draw inspiration from [1], where the joint Optimal Power-Water Flow (OPWF) problem is formalized, which coordinates tanks and pumps in the water network to improve operations in the power network. In PowerWaterModels, similar OPWF problems can easily be constructed using a variety of power and water network formulations while forgoing the need to develop specialized algorithms. This enables an efficient and systematic analysis of solutions under various modeling assumptions.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Within the script, LinDist3FlowPowerModel is based on the power flow approximation of [2], and PWLRDWaterModel is a piecewise-linear water flow relaxation similar to the relaxations of [3] and [4]. The example is based on benchmark data described by [1], which couples the IEEE 13-node test feeder of [5] with a synthetic municipal water network developed by [6]. Notably, the data uses a time series of twelve hours discretized into thirty minute intervals. This analysis thus highlights the temporal modeling features of PowerWaterModels.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Joint OPWF problems are naturally geared toward understanding the tradeoffs between power and water network operations. These tradeoffs are easily explored via modification of the joint objective function. In the example, we test three objectives to explore these tradeoffs. The first minimizes operational cost of the single generating unit in the power network while assuming inexpensive midday fuel prices. The second does the same while assuming expensive midday fuel prices. The final objective minimizes the deviation in active power generation between adjacent time steps, i.e., minimizes fluctuations in the generation profile. Each objective has implications for optimal operations of the power network as well as the water network, where pumps are modeled as power loads and water tanks provide indirect energy storage.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The results from executing the example generate a number of plots. In one plot, the three distinct price signals are shown. These correspond to the various time profiles of generation cost coefficients used in the different analyses. The remaining figures indicate how the power generation and water storage vary based on these different objective functions.   When generation prices are high, it is less advantageous to operate water pumps, which correspond to drops in power generation and tank volumes during the midday period. Otherwise, if generation is inexpensive, it's advantageous to operate water pumps and increase tank volumes during the midday period. If the objective is to smooth the generation profile, it can be facilitated through careful use of pumps throughout the day.","category":"page"},{"location":"examples/#Sources","page":"Examples","title":"Sources","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"[1] Zamzam, A. S., Dall’Anese, E., Zhao, C., Taylor, J. A., & Sidiropoulos, N. D. (2018). Optimal water–power flow-problem: Formulation and distributed optimal solution. IEEE Transactions on Control of Network Systems, 6(1), 37-47.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"[2] Gan, L., & Low, S. H. (2014, August). Convex relaxations and linear approximation for optimal power flow in multiphase radial networks. In 2014 Power Systems Computation Conference (pp. 1-9). IEEE.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"[3] Tasseff, B., Bent, R., Coffrin, C., Barrows, C., Sigler, D., Stickel, J., ... & Van Hentenryck, P. (2022). Polyhedral relaxations for optimal pump scheduling of potable water distribution networks. arXiv preprint arXiv:2208.03551.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"[4] Vieira, B. S., Mayerle, S. F., Campos, L. M., & Coelho, L. C. (2020). Optimizing drinking water distribution system operations. European Journal of Operational Research, 280(3), 1035-1050.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"[5] Kersting, W. H. (1991). Radial distribution test feeders. IEEE Transactions on Power Systems, 6(3), 975-985.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"[6] Cohen, D., Shamir, U., & Sinai, G. (2000). Optimal operation of multi-quality water supply systems-II: The QH model. Engineering Optimization+ A35, 32(6), 687-719.","category":"page"},{"location":"objective/#Objective","page":"Objective","title":"Objective","text":"","category":"section"},{"location":"objective/","page":"Objective","title":"Objective","text":"The objective used by the Power-Water Flow (PWF) problem specification is a feasibility-only objective. The default objective used by the Optimal Power-Water Flow (OPWF) problem specification is _PMD.objective_mc_min_fuel_cost(pmd), which is described in the PowerModelsDistribution documentation and represents a standard fuel cost minimization. In addition to these objectives, PowerWaterModels also defines an additional objective, objective_min_max_generation_fluctuation(pwm), defined over AbstractPowerWaterModel.","category":"page"},{"location":"objective/","page":"Objective","title":"Objective","text":"Modules = [PowerWaterModels]\nPages   = [\"core/objective.jl\"]\nOrder   = [:function]\nPrivate  = true","category":"page"},{"location":"objective/#PowerWaterModels.objective_min_max_generation_fluctuation-Tuple{AbstractPowerWaterModel}","page":"Objective","title":"PowerWaterModels.objective_min_max_generation_fluctuation","text":"Objective for minimizing the maximum difference between time-adjacent power generation variables. Note that this function introduces a number of auxiliary variables and constraints to appropriately model the objective. Mathematically, the objective and auxiliary terms are modeled as follows:\n\n    beginaligned\n     textminimize   z \n     textsubject to   z geq pg_i c t - pg_i c t-1  forall i in mathcalG  forall c in mathcalC  forall t in 2 3 dots T \n       z geq pg_i c t-1 - pg_i c t  forall i in mathcalG  forall c in mathcalC  forall t in 2 3 dots T \n       z geq 0 \n       x in mathcalX\n    endaligned\n\nwhere mathcalG is the set of generators, mathcalC is the set of conductors, and 2 3 dots T are the non-starting time indices. Further, x in mathcalX represents the remainder of the problem formulation, i.e., variables and constraints not relevant to this description.\n\n\n\n\n\n","category":"method"},{"location":"#PowerWaterModels.jl-Documentation","page":"Home","title":"PowerWaterModels.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PowerWaterModels","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PowerWaterModels.jl is a Julia/JuMP package for the joint optimization of steady-state power and water distribution networks. It is designed to enable the computational evaluation of historical and emerging power-water network optimization formulations and algorithms using a common platform. The code is engineered to decouple Problem Specifications (e.g., power-water flow, optimal power-water flow) from Network Formulations (e.g., mixed-integer linear, mixed-integer nonlinear). This decoupling enables the definition of a variety of optimization formulations and their comparison on common problem specifications.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The latest stable release of PowerWaterModels can be installed using the Julia package manager with","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add PowerWaterModels","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the current development version, install the package using","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add PowerWaterModels#master","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, test that the package works as expected by executing","category":"page"},{"location":"","page":"Home","title":"Home","text":"] test PowerWaterModels","category":"page"},{"location":"#Usage-at-a-Glance","page":"Home","title":"Usage at a Glance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"At least one optimization solver is required to run PowerWaterModels. The solver selected typically depends on the type of problem formulation being employed. As an example, the mixed-integer nonlinear programming solver Juniper can be used for testing any of the problem formulations considered in this package. Juniper itself depends on the installation of a nonlinear programming solver (e.g., Ipopt) and a mixed-integer linear programming solver (e.g., HiGHS). Installation of the JuMP interfaces to Juniper, Ipopt, and HiGHS can be performed via the Julia package manager, i.e.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add JuMP Juniper Ipopt HiGHS","category":"page"},{"location":"","page":"Home","title":"Home","text":"After installation of the required solvers, an example optimal power-water flow problem (whose file inputs can be found in the examples directory within the PowerWaterModels repository) can be solved via","category":"page"},{"location":"","page":"Home","title":"Home","text":"using JuMP, Juniper, Ipopt, HiGHS\nusing PowerWaterModels\n\n# Set up the optimization solvers.\nipopt = JuMP.optimizer_with_attributes(Ipopt.Optimizer, \"print_level\" => 0, \"sb\" => \"yes\")\nhighs = JuMP.optimizer_with_attributes(HiGHS.Optimizer, \"log_to_console\" => false)\njuniper = JuMP.optimizer_with_attributes(\n    Juniper.Optimizer, \"nl_solver\" => ipopt, \"mip_solver\" => highs,\n    \"time_limit\" => 60.0)\n\n# Specify paths to the power, water, and power-water linking files.\np_file = \"examples/data/opendss/IEEE13_CDPSM.dss\" # Power network.\nw_file = \"examples/data/epanet/cohen-short.inp\" # Water network.\npw_file = \"examples/data/json/zamzam.json\" # Power-water linking.\n\n# Specify the power and water formulation types separately.\npwm_type = PowerWaterModel{LinDist3FlowPowerModel, CRDWaterModel}\n\n# Solve the joint optimal power-water flow problem and store the result.\nresult = solve_opwf(p_file, w_file, pw_file, pwm_type, juniper)","category":"page"},{"location":"","page":"Home","title":"Home","text":"After solving the problem, results can then be analyzed, e.g.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Objective value, representing the cost of power generation.\nresult[\"objective\"]\n\n# Generator 1's real power generation at the first time step.\nresult[\"solution\"][\"it\"][\"pmd\"][\"nw\"][\"1\"][\"gen\"][\"1\"][\"pg\"]\n\n# Pump 2's head gain at the third time step.\nresult[\"solution\"][\"it\"][\"wm\"][\"nw\"][\"3\"][\"pump\"][\"2\"][\"g\"]","category":"page"}]
}
